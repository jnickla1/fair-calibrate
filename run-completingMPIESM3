#!/bin/bash
#SBATCH -J FAIR_M3
#SBATCH -t 1:00:00
#SBATCH --account=epscor-condo
#SBATCH -N 1-5
######SBATCH -C 48core
#SBATCH -n 10  ###85
#SBATCH --mem-per-cpu=5g
#SBATCH --array=1-50  # Sweeps ENSEMBLE_RUN
#SBATCH -o logs_M3/aab8-%A_%a.out

echo "Starting job $SLURM_ARRAY_TASK_ID on $HOSTNAME"

# Load environment
eval "$(conda shell.bash hook)"
#source /gpfs/runtime/opt/anaconda/2022.05/condabin/conda
module load parallel #r

# Load .env file if present
if [ -f .env3 ]; then
  export $(cat .env3 | xargs)
fi

ENSEMBLE_RUN=${SLURM_ARRAY_TASK_ID}
export ENSEMBLE_RUN
start=$SECONDS

CUTOFF_MIN=1930 #1930 #now 86
CUTOFF_MAX=2099 #2099 #170 processors

###rm ${script_dir}/logs_M3/arrayjob-*_${ENSEMBLE_RUN}.out

# Base path to fair-calibrate input tree
script_dir=$PWD
base_dir="${script_dir}/input/fair-${FAIR_VERSION}/v${CALIBRATION_VERSION}/${CONSTRAINT_SET}"

cd "${base_dir}/constraining" || exit 1

# Define the processing function
process_cutoff_o() {
  CUTOFF_YEAR=$1
  export CUTOFF_YEAR
  cd "${base_dir}/constraining"
  echo ">>> [ENS $ENSEMBLE_RUN | CUT $CUTOFF_YEAR] Starting..." >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
  file_array=( $(ls [0-9][0-9]_*.*) )
  for filekey in "${!file_array[@]}"; do
    file=${file_array[$filekey]}
    if [ $filekey -lt 3 ] && [ $filekey -ge 1 ] ; then
    echo "Running ${file}" >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
    chmod +x "$file"
    ./"$file" >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log 2>&1 || {
      echo "ERROR in ${file} for cutoff ${CUTOFF_YEAR}" >>  ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
      exit 1
    }
    fi
  done
  echo ">>> [ENS $ENSEMBLE_RUN | CUT $CUTOFF_YEAR] Done!" >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
}

process_cutoff_n() {
  CUTOFF_YEAR=$1
  export CUTOFF_YEAR
  cd "${base_dir}/constraining"
  echo ">>> [ENS $ENSEMBLE_RUN | CUT $CUTOFF_YEAR] Starting..." >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
  file_array=( $(ls [0-9][0-9]_*.*) )
  filekey=3
    file=${file_array[$filekey]}
    echo "Running ${file}" >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
    chmod +x "$file"
    ./"$file" >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log 2>&1 || {
      echo "ERROR in ${file} for cutoff ${CUTOFF_YEAR}" >>  ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
      exit 1
    }
  echo ">>> [ENS $ENSEMBLE_RUN | CUT $CUTOFF_YEAR] Done!" >> ${script_dir}/logs_M3/log_ens${ENSEMBLE_RUN}_cut${CUTOFF_YEAR}.log
}

export -f process_cutoff_o
export -f process_cutoff_n
export base_dir
export script_dir
export FAIR_VERSION
export CALIBRATION_VERSION
export CONSTRAINT_SET
export OMP_NUM_THREADS=1
# Run the loop in parallel over all cutoff years
conda activate fair-calibrate
seq $CUTOFF_MIN $CUTOFF_MAX | parallel -j 10 process_cutoff_o

conda activate fair2
seq $CUTOFF_MIN $CUTOFF_MAX | parallel -j 10 process_cutoff_n

echo "Total time: $((SECONDS - start)) seconds"
echo "All done!"

